# Unique name for this workflow
name: Validate PR on dev branch

# Definition when the workflow should run
on:
    # The workflow will run whenever an event happens on a pull request
    pull_request:
      # The events are that a PR is opened, or when a commit is pushed
      # to a branch that has an existing pull request
      types: [opened, synchronize, edited]
      # The branches filter allows to specify that this workflow should only
      # run if the branch name is "dev". This way we prevent this workflow
      # from running when PRs are opened on other branches
      branches: [ dev ]
      # We only care about changes to the force-app directory, which is the
      # root directory of the sfdx project. This prevents the job from running
      # when changing non-salesforce files (like this yml file).
      paths:
        - 'force-app/**'
            

# Jobs to be executed when the above conditions are met
jobs:
    # This is the name of the job. You can give it whatever name you want
    validate-deployment-on-develop-org:
        # As mentioned in the blog post, this job runs inside a VM. Here we
        # can specify which OS this VM should run on. 
        # In this case, we are going to run our commands on the latest version
        # of ubuntu
        runs-on: ubuntu-latest
        if: ${{ github.actor != 'dependabot[bot]' }}
        steps:
            # Now we install nodejs in the VM, and specify version 14
            - uses: actions/setup-node@v2
              with:
                node-version: '14'

            # The idea is that the VM can access your remote repository
            # because your repository is an sfdx project.
            # This is a default action that allows us to enter the root 
            # directory of the repository

            # Make sure to specify fetch-depth:0. This allows us to
            # access previous commits that have been pushed to the repository.

            # We'll need this later when we try to figure out which metadata has 
            # changed between commits, so that we can only deploy that metadata
            # to the destination org

            - name: 'Checkout source code'
              uses: actions/checkout@v3
              with:
                fetch-depth: 0
            

              # Set diff from point 
            - name: 'Set diff FROM point'
              shell: bash
              run: |
                  echo "DIFF=$(git log origin/dev..origin/feature-mult-commit --reverse -n 1 | awk 'NR==1 {print $2}')" >> $GITHUB_ENV
            - name: 'Get PR trigger branch ref'
              shell: bash
              run: |
                  echo "GIT_NAME=${GITHUB_REF_NAME}" >> $GITHUB_ENV
                  echo "GIT_SHA=${GITHUB_SHA}" >> $GITHUB_ENV
                  echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV 
                  echo "SOURCE=${{github.head_ref}}" >> $GITHUB_ENV 
            # We use SFDX Git Delta to create a directory with only the metadata that has changed.
            # this allows us to deploy only those changes, as opposed to deploying the entire branch. 
            # This helps reducing deployment times
            - name: 'Create delta packages for new, modified or deleted metadata'
              run: | 
                  mkdir changed-sources
                  echo "GIT_SHA=${GIT_SHA}"
                  echo "GIT_BRANCH=${GIT_BRANCH}"
                  echo "GIT_NAME=${GIT_NAME}"
                  echo "SOURCE=${SOURCE}"
                  git merge-base origin/dev ${{ env.DIFF }}
